var NumberFormatter=function(){"use strict";const t=t=>t.replace(/[-/\\^$*+?.()|[]{}]/g,"\\$&");return class{#t;#r;#e=1;#s=2;group="";decimal=".";constructor(r,e){this.#t=new Intl.NumberFormat(r,e);const s=this.#t.formatToParts(-10000000.1);for(const t of s)switch(t.type){case"group":this.group=t.value;break;case"decimal":this.decimal=t.value}const i=new Intl.NumberFormat(r);this.digits=new Array(10).fill().map(((t,r)=>i.format(r)));const a=t(this.decimal),o=`[${this.digits.map(t).join("")}]`,n=t(this.group),m=this.group?`(?:${o}{1,3}${n})*${o}{1,3}(?:${a}${o}+)?`:`${o}+(?:${a}${o}+)?`;let c=!1,u="";for(const r of s)switch(r.type){case"literal":case"currency":u+=`(?:${t(r.value)})?`;break;case"minusSign":c&&(this.#e=2,this.#s=1),u+=`(${t(r.value)})?`;break;case"integer":c||(c=!0,u+=`(${m})`)}this.#r=new RegExp(u)}format(t){return this.#t.format(t)}formatToParts(t){return this.#t.formatToParts(t)}parse(t){const r=this.#r.exec(t);if(!r)throw new Error("Invalid number string");let e="";return r[this.#e]&&(e+="-"),e+=r[this.#s].replace(/./g,(t=>this.digits.includes(t)?this.digits.indexOf(t):t===this.decimal?".":"")),parseFloat(e)}resolvedOptions(){return this.#t.resolvedOptions()}static supportedLocalesOf(t,r){return Intl.NumberFormat.supportedLocalesOf(t,r)}}}();