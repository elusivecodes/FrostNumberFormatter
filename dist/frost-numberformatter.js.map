{"version":3,"file":"frost-numberformatter.js","sources":["../src/helpers.js","../src/number-formatter.js"],"sourcesContent":["/**\n * Helpers\n */\n\n/**\n * Return an escaped string for use in RegEx.\n * @param {string} string The string to escape.\n * @return {string} The escaped string.\n */\nexport const escapeRegExp = (string) => string.replace(/[-/\\\\^$*+?.()|[]{}]/g, '\\\\$&');\n","import { escapeRegExp } from './helpers.js';\n\n/**\n * NumberFormatter class\n * @class\n */\nexport default class NumberFormatter {\n    /**\n     * New NumberFormatter constructor.\n     * @param {string|string[]} [locale] The locale(s) to use for formatting.\n     * @param {object} [options] The options to use for formatting.\n     * @param {string} [options.localeMatcher] The locale matching algorithm to use.\n     * @param {string} [options.style] The formatting style to use.\n     * @param {string} [options.currency] The currency to use in currency formatting.\n     * @param {string} [options.currencyDisplay] The method for displaying currency formatting.\n     * @param {Boolean} [options.useGrouping] Whether to use grouping separators.\n     * @param {number} [options.minimumIntegerDigits] The minimum number of integer digits to use.\n     * @param {number} [options.minimumFractionDigits] The minimum number of fraction digits to use.\n     * @param {number} [options.maximumFractionDigits] The maximum number of fraction digits to use.\n     * @param {number} [options.minimumSignificantDigits] The minimum number of significant digits to use.\n     * @param {number} [options.maximumSignificantDigits] The maximum number of significant digits to use.\n     */\n    constructor(locale, options) {\n        this.group = '';\n        this.decimal = '.';\n        this._minusIndex = 1;\n        this._numberIndex = 2;\n\n        this._formatter = new Intl.NumberFormat(locale, options);\n\n        const parts = this._formatter.formatToParts(-10000000.1);\n        for (const part of parts) {\n            switch (part.type) {\n                case 'group':\n                    this.group = part.value;\n                    break;\n                case 'decimal':\n                    this.decimal = part.value;\n                    break;\n            }\n        }\n\n        const baseFormatter = new Intl.NumberFormat(locale);\n\n        this.digits = new Array(10)\n            .fill()\n            .map((_, i) => baseFormatter.format(i));\n\n        const decimalRegExp = escapeRegExp(this.decimal);\n        const digitRegExp = `[${this.digits.map(escapeRegExp).join('')}]`;\n        const groupRegExp = escapeRegExp(this.group);\n\n        const numberRegExp = this.group ?\n            `(?:${digitRegExp}{1,3}${groupRegExp})*${digitRegExp}{1,3}(?:${decimalRegExp}${digitRegExp}+)?` :\n            `${digitRegExp}+(?:${decimalRegExp}${digitRegExp}+)?`;\n\n        let numberAdded = false;\n        let regExp = '';\n\n        for (const part of parts) {\n            switch (part.type) {\n                case 'literal':\n                case 'currency':\n                    regExp += `(?:${escapeRegExp(part.value)})?`;\n                    break;\n                case 'minusSign':\n                    if (numberAdded) {\n                        this._minusIndex = 2;\n                        this._numberIndex = 1;\n                    }\n\n                    regExp += `(${escapeRegExp(part.value)})?`;\n                    break;\n                case 'integer':\n                    if (!numberAdded) {\n                        numberAdded = true;\n\n                        regExp += `(${numberRegExp})`;\n                    }\n                    break;\n            }\n        }\n\n        this._regExp = new RegExp(regExp);\n    }\n\n    /**\n     * Return a formatted number string, using the locale and formatting options.\n     * @param {number} number The number to format.\n     * @return {string} The formatted number string.\n     */\n    format(number) {\n        return this._formatter.format(number);\n    }\n\n    /**\n     * Return an array of objects, containing the formatted number string in parts.\n     * @param {number} number The number to format.\n     * @return {object[]} The formatted number, as an array of parts.\n     */\n    formatToParts(number) {\n        return this._formatter.formatToParts(number);\n    }\n\n    /**\n     * Return a parsed number from a formatted number string.\n     * @param {string} numberString The formatted number string.\n     * @return {number} The parsed number.\n     */\n    parse(numberString) {\n        const match = this._regExp.exec(numberString);\n\n        if (!match) {\n            throw new Error('Invalid number string');\n        }\n\n        let parsedString = '';\n\n        if (match[this._minusIndex]) {\n            parsedString += '-';\n        }\n\n        parsedString += match[this._numberIndex].replace(\n            /./g,\n            (match) => (\n                this.digits.includes(match) ?\n                    this.digits.indexOf(match) :\n                    (\n                        match === this.decimal ?\n                            '.' :\n                            ''\n                    )\n            ),\n        );\n\n        return parseFloat(parsedString);\n    }\n\n    /**\n     * Return an object with the locale and formatting options.\n     * @return {object} The computed locale and formatting options.\n     */\n    resolvedOptions() {\n        return this._formatter.resolvedOptions();\n    }\n\n    /**\n     * Return an array of supported locales.\n     * @param {string|string[]} locales The locale(s) to test for support.\n     * @param {object} [options] The options to use for testing support.\n     * @param {string} [options.localeMatcher] The locale matching algorithm to use.\n     * @return {string[]} An array of strings, containing matching supported locales.\n     */\n    static supportedLocalesOf(locales, options) {\n        return Intl.NumberFormat.supportedLocalesOf(locales, options);\n    }\n}\n"],"names":[],"mappings":"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"}